# -*- coding: utf-8 -*-
"""autolysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGb2dWHbx4QLuE9MCIJwXJic3rzvGmWI
"""

# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "pandas",
#   "argparse",
#    "chardet",
# "requests",
# "openai"
# ]
# ///

import pandas as pd
import chardet
import argparse
import requests
import os
import openai
import json

api_key = os.environ.get("AIPROXY_TOKEN")
    #print(api_key)
MODEL = "gpt-4o-mini"

api_key = os.environ.get("AIPROXY_TOKEN")

api_url = "http://aiproxy.sanand.workers.dev/openai/v1/chat/completions"
headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    # Check if API Key is set, otherwise provide instructions
if not api_key:
        print("Error: AIPROXY_TOKEN environment variable not set.")
        print("Please set your AIRPOXY key before running the code.  Example:")
        print('os.environ["AIPROXY_TOKEN"] = "YOUR_ACTUAL_AIPROXY_TOKEN"')
        exit()
def detect_encoding(this_file):
    with open(this_file, 'rb') as rawdata:
        result = chardet.detect(rawdata.read(10000))  # Read a chunk of the file
    return result['encoding']



def analyse_csv(this_file):
  encoding = detect_encoding(this_file)
  the_df = pd.read_csv(this_file, encoding=encoding)
  summary = the_df.describe()
  return str(summary)

def main(file_path):

    f_name = os.path.splitext(os.path.basename(file_path))[0]
    dir_name = f_name
    output_dir = os.path.join(os.getcwd(), dir_name)
    os.makedirs(output_dir, exist_ok=True)
    readme_path = os.path.join(output_dir, 'README.md')
    image_path = os.path.join(output_dir, 'images')
    os.makedirs(image_path, exist_ok=True)
    image_paths = []
    #image_paths =
    # Save narrative and embed images
    narrative =analyse_csv(file_path)
    with open(readme_path, 'w') as f:
        f.write(narrative)
        f.write("\nGraphs\n")
        for img in image_paths:
            f.write(f"![{os.path.basename(img)}]({os.path.basename(img)})\n")

#main("goodreads.csv")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Analyse a csv file")
    parser.add_argument("this_csvFile",help="the csv File to be analysed")
    arg_fname = parser.parse_args()

    main(arg_fname.this_csvFile)